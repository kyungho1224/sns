plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.3'
	id 'io.spring.dependency-management' version '1.1.4'
//	id 'com.github.node-gradle.node' version '3.3.0'
}

group = 'kr.amaranth'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
//	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
}

tasks.named('test') {
	useJUnitPlatform()
}

//node {
//	nodeModulesDir = file("$projectDir/front-end")
//	version = '18.3.0'
//	download = true
//	npmCommand = 'C:\\Program Files\\nodejs\\npm.cmd'
////	npmCommand = 'npm --location=global'
//}
//
//task npmBuild(type: NpmTask) {
//	dependsOn 'updateBrowserslist'
//	args = ['run', "build"]
//}
//
//task updateBrowserslist(type: Exec) {
//	commandLine 'npx', 'browserslist@latest', '--update-db'
//}
//
//task copyFrontEnd(type: Copy) {
//	from "$projectDir/front-end/static"
//	into 'build/resources/main/static/.'
//}
//
//task cleanFrontEnd(type: Delete) {
//	delete "$projectDir/front-end/static", "$projectDir/front-end/node_modules"
//}
//
//npmBuild.dependsOn npmInstall
//copyFrontEnd.dependsOn npmBuild
//compileJava.dependsOn copyFrontEnd
//
//clean.dependsOn cleanFrontEnd
